// <auto-generated />
using MGT.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MGT.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MGT.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Building")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<int>("Room")
                        .HasColumnType("integer");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("MGT.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("FromLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RobotId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RobotType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer");

                    b.Property<int>("ToLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ToLocationId");

                    b.ToTable("Tasks");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MGT.Entities.SurveillanceTask", b =>
                {
                    b.HasBaseType("MGT.Entities.Task");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.ToTable("SurveillanceTasks", (string)null);
                });

            modelBuilder.Entity("MGT.Entities.TransportTask", b =>
                {
                    b.HasBaseType("MGT.Entities.Task");

                    b.Property<int>("ConfirmationCode")
                        .HasColumnType("integer");

                    b.Property<string>("ContactEnd")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContactStart")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.ToTable("TransportTasks", (string)null);
                });

            modelBuilder.Entity("MGT.Entities.Task", b =>
                {
                    b.HasOne("MGT.Entities.Location", "FromLocation")
                        .WithMany()
                        .HasForeignKey("FromLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MGT.Entities.Location", "ToLocation")
                        .WithMany()
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromLocation");

                    b.Navigation("ToLocation");
                });

            modelBuilder.Entity("MGT.Entities.SurveillanceTask", b =>
                {
                    b.HasOne("MGT.Entities.Task", null)
                        .WithOne()
                        .HasForeignKey("MGT.Entities.SurveillanceTask", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MGT.Entities.TransportTask", b =>
                {
                    b.HasOne("MGT.Entities.Task", null)
                        .WithOne()
                        .HasForeignKey("MGT.Entities.TransportTask", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
